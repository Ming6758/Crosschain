# agent/exploit_classifier.py
from openai import OpenAI
from groq import Groq
import os
from dotenv import load_dotenv
from typing import Dict, Any

load_dotenv()

class ModelClient:
    def __init__(self):
        self.openai = OpenAI()
        self.groq = Groq(api_key=os.getenv("GROQ_API_KEY"))

    def _call(self, prompt: str, model: str):
        return self.openai.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
        ).choices[0].message.content.strip()

    def openai(self, prompt: str) -> str:
        return self._call(prompt, "gpt-4o")

    def groq(self, prompt: str) -> str:
        return self.groq.chat.completions.create(
            model="llama3-70b-8192",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
        ).choices[0].message.content.strip()

def classify(state: Dict[str, Any]) -> Dict[str, Any]:
    client = ModelClient()
    prompt = f"""
You are a blockchain security analyst. Classify the incident **exactly** into one of the following types (return ONLY the type name):

- Flash Loan Attack
- Governance Attack
- Exit Scam / Rug Pull
- Oracle Manipulation
- Token Dump
- Bridge Exploit
- Smart Contract Vulnerability
- Other (brief reason)

Alert: {state['details']}
Chain ID: {state['chainId']}
Contract context: {state.get('contractContext', 'N/A')}
Price impact: {state.get('tokenPriceImpact', 0):.2%}
Anomaly flag: {state.get('anomaly', False)}
"""

    try:
        state["exploit_type"] = client.openai(prompt)
    except Exception as e:
        print(f"OpenAI error â†’ fallback Groq: {e}")
        state["exploit_type"] = client.groq(prompt)
    return state
