# agent/exploit_classifier.py
from openai import OpenAI
from groq import Groq
import os
from dotenv import load_dotenv
from typing import Dict, Any

load_dotenv()

class ModelClient:
    def __init__(self):
        self.openai_client = OpenAI()
        self.groq_client = Groq(api_key=os.getenv("GROQ_API_KEY"))
    
    def classify_with_openai(self, prompt: str) -> str:
        completion = self.openai_client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3
        )
        return completion.choices[0].message.content.strip()
    
    def classify_with_groq(self, prompt: str) -> str:
        completion = self.groq_client.chat.completions.create(
            model="llama3-70b-8192",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3
        )
        return completion.choices[0].message.content.strip()

def classify(state: Dict[str, Any]) -> Dict[str, Any]:
    model_client = ModelClient()
    prompt = f"""
    Given this alert: {state['details']},
    Classify the type of exploit it may represent from:
    - Flash Loan Attack
    - Governance Attack
    - Exit Scam / Rug Pull
    - Oracle Manipulation
    - Token Dump
    - Bridge Exploit
    - Smart Contract Vulnerability
    - Other (specify)
    
    Provide only the type name. Reason briefly if 'Other'.
    
    Additional context:
    - Chain ID: {state['chainId']}
    - Contract: {state.get('contractContext', 'N/A')}
    - Price Impact: {state['tokenPriceImpact']}
    - Anomaly Detected: {state.get('anomaly', False)}
    """
    
    try:
        state["exploit_type"] = model_client.classify_with_openai(prompt)
    except Exception as e:
        print(f"OpenAI failed, falling back to Groq: {str(e)}")
        state["exploit_type"] = model_client.classify_with_groq(prompt)
    
    return state
